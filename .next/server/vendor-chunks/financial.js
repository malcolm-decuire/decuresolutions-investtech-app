"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/financial";
exports.ids = ["vendor-chunks/financial"];
exports.modules = {

/***/ "(ssr)/./node_modules/financial/dist/financial.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/financial/dist/financial.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PaymentDueTime: () => (/* binding */ PaymentDueTime),\n/* harmony export */   fv: () => (/* binding */ fv),\n/* harmony export */   ipmt: () => (/* binding */ ipmt),\n/* harmony export */   irr: () => (/* binding */ irr),\n/* harmony export */   mirr: () => (/* binding */ mirr),\n/* harmony export */   nper: () => (/* binding */ nper),\n/* harmony export */   npv: () => (/* binding */ npv),\n/* harmony export */   pmt: () => (/* binding */ pmt),\n/* harmony export */   ppmt: () => (/* binding */ ppmt),\n/* harmony export */   pv: () => (/* binding */ pv),\n/* harmony export */   rate: () => (/* binding */ rate)\n/* harmony export */ });\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n/**\n * When payments are due\n *\n * @since v0.0.12\n */\nvar PaymentDueTime;\n(function (PaymentDueTime) {\n  /** Payments due at the beginning of a period (1) */\n  PaymentDueTime[\"Begin\"] = \"begin\";\n  /** Payments are due at the end of a period (0) */\n  PaymentDueTime[\"End\"] = \"end\";\n})(PaymentDueTime || (PaymentDueTime = {}));\n/**\n * Compute the future value.\n *\n * @param rate - Rate of interest as decimal (not per cent) per period\n * @param nper - Number of compounding periods\n * @param pmt - A fixed payment, paid either at the beginning or ar the end (specified by `when`)\n * @param pv - Present value\n * @param when - When payment was made\n *\n * @returns The value at the end of the `nper` periods\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * What is the future value after 10 years of saving $100 now, with\n * an additional monthly savings of $100. Assume the interest rate is\n * 5% (annually) compounded monthly?\n *\n * ```javascript\n * import { fv } from 'financial'\n *\n * fv(0.05 / 12, 10 * 12, -100, -100) // 15692.928894335748\n * ```\n *\n * By convention, the negative sign represents cash flow out (i.e. money not\n * available today).  Thus, saving $100 a month at 5% annual interest leads\n * to $15,692.93 available to spend in 10 years.\n *\n * ## Notes\n *\n * The future value is computed by solving the equation:\n *\n * ```\n * fv + pv * (1+rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) == 0\n * ```\n *\n * or, when `rate == 0`:\n *\n * ```\n * fv + pv + pmt * nper == 0\n * ```\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nfunction fv(rate, nper, pmt, pv, when) {\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var isRateZero = rate === 0;\n  if (isRateZero) {\n    return -(pv + pmt * nper);\n  }\n  var temp = Math.pow(1 + rate, nper);\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  return -pv * temp - pmt * (1 + rate * whenMult) / rate * (temp - 1);\n}\n/**\n * Compute the payment against loan principal plus interest.\n *\n * @param rate - Rate of interest (per period)\n * @param nper - Number of compounding periods (e.g., number of payments)\n * @param pv - Present value (e.g., an amount borrowed)\n * @param fv - Future value (e.g., 0)\n * @param when - When payments are due\n *\n * @returns the (fixed) periodic payment\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * What is the monthly payment needed to pay off a $200,000 loan in 15\n * years at an annual interest rate of 7.5%?\n *\n * ```javascript\n * import { pmt } from 'financial'\n *\n * pmt(0.075/12, 12*15, 200000) // -1854.0247200054619\n * ```\n *\n * In order to pay-off (i.e., have a future-value of 0) the $200,000 obtained\n * today, a monthly payment of $1,854.02 would be required.  Note that this\n * example illustrates usage of `fv` having a default value of 0.\n *\n * ## Notes\n *\n * The payment is computed by solving the equation:\n *\n * ```\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate*when) / rate * ((1 + rate) ** nper - 1) == 0\n * ```\n *\n * or, when `rate == 0`:\n *\n * ```\n * fv + pv + pmt * nper == 0\n * ```\n *\n * for `pmt`.\n *\n * Note that computing a monthly mortgage payment is only\n * one use for this function.  For example, `pmt` returns the\n * periodic deposit one must make to achieve a specified\n * future balance given an initial deposit, a fixed,\n * periodically compounded interest rate, and the total\n * number of periods.\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nfunction pmt(rate, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var isRateZero = rate === 0;\n  var temp = Math.pow(1 + rate, nper);\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var maskedRate = isRateZero ? 1 : rate;\n  var fact = isRateZero ? nper : (1 + maskedRate * whenMult) * (temp - 1) / maskedRate;\n  return -(fv + pv * temp) / fact;\n}\n/**\n * Compute the number of periodic payments.\n *\n * @param rate - Rate of interest (per period)\n * @param pmt - Payment\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns The number of periodic payments\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * If you only had $150/month to pay towards the loan, how long would it take\n * to pay-off a loan of $8,000 at 7% annual interest?\n *\n * ```javascript\n * import { nper } from 'financial'\n *\n * Math.round(nper(0.07/12, -150, 8000), 5) // 64.07335\n * ```\n *\n * So, over 64 months would be required to pay off the loan.\n *\n * ## Notes\n *\n * The number of periods `nper` is computed by solving the equation:\n *\n * ```\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper-1) = 0\n * ```\n *\n * but if `rate = 0` then:\n *\n * ```\n * fv + pv + pmt * nper = 0\n * ```\n */\nfunction nper(rate, pmt, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var isRateZero = rate === 0;\n  if (isRateZero) {\n    return -(fv + pv) / pmt;\n  }\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var z = pmt * (1 + rate * whenMult) / rate;\n  return Math.log((-fv + z) / (pv + z)) / Math.log(1 + rate);\n}\n/**\n * Compute the interest portion of a payment.\n *\n * @param rate - Rate of interest as decimal (not per cent) per period\n * @param per - Interest paid against the loan changes during the life or the loan. The `per` is the payment period to calculate the interest amount\n * @param nper - Number of compounding periods\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns Interest portion of payment\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * What is the amortization schedule for a 1 year loan of $2500 at\n * 8.24% interest per year compounded monthly?\n *\n * ```javascript\n * const principal = 2500\n * const periods = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n * const ipmts = periods.map((per) => f.ipmt(0.0824 / 12, per, 1 * 12, principal))\n * expect(ipmts).toEqual([\n *   -17.166666666666668,\n *   -15.789337457350777,\n *   -14.402550587464257,\n *   -13.006241114404524,\n *   -11.600343649629737,\n *   -10.18479235559687,\n *   -8.759520942678298,\n *   -7.324462666057678,\n *   -5.879550322604295,\n *   -4.424716247725826,\n *   -2.9598923121998877,\n *   -1.4850099189833388\n * ])\n * const interestpd = ipmts.reduce((a, b) => a + b, 0)\n * expect(interestpd).toBeCloseTo(-112.98308424136215, 6)\n * ```\n *\n * The `periods` variable represents the periods of the loan.  Remember that financial equations start the period count at 1!\n *\n * ## Notes\n *\n * The total payment is made up of payment against principal plus interest.\n *\n * ```\n * pmt = ppmt + ipmt\n * ```\n */\nfunction ipmt(rate, per, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  // Payments start at the first period, so payments before that\n  // don't make any sense.\n  if (per < 1) {\n    return Number.NaN;\n  }\n  // If payments occur at the beginning of a period and this is the\n  // first period, then no interest has accrued.\n  if (when === PaymentDueTime.Begin && per === 1) {\n    return 0;\n  }\n  var totalPmt = pmt(rate, nper, pv, fv, when);\n  var ipmtVal = _rbl(rate, per, totalPmt, pv, when) * rate;\n  // If paying at the beginning we need to discount by one period\n  if (when === PaymentDueTime.Begin && per > 1) {\n    ipmtVal = ipmtVal / (1 + rate);\n  }\n  return ipmtVal;\n}\n/**\n * Compute the payment against loan principal.\n *\n * @param rate - Rate of interest (per period)\n * @param per - Amount paid against the loan changes.  The `per` is the period of interest.\n * @param nper - Number of compounding periods\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns the payment against loan principal\n *\n * @since v0.0.14\n */\nfunction ppmt(rate, per, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var total = pmt(rate, nper, pv, fv, when);\n  return total - ipmt(rate, per, nper, pv, fv, when);\n}\n/**\n * Calculates the present value of an annuity investment based on constant-amount\n * periodic payments and a constant interest rate.\n *\n * @param rate - Rate of interest (per period)\n * @param nper - Number of compounding periods\n * @param pmt - Payment\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns the present value of a payment or investment\n *\n * @since v0.0.15\n *\n * ## Examples\n *\n * What is the present value (e.g., the initial investment)\n * of an investment that needs to total $15692.93\n * after 10 years of saving $100 every month?  Assume the\n * interest rate is 5% (annually) compounded monthly.\n *\n * ```javascript\n * import { pv } from 'financial'\n *\n * pv(0.05/12, 10*12, -100, 15692.93) // -100.00067131625819\n * ```\n *\n * By convention, the negative sign represents cash flow out\n * (i.e., money not available today).  Thus, to end up with\n * $15,692.93 in 10 years saving $100 a month at 5% annual\n * interest, one's initial deposit should also be $100.\n *\n * ## Notes\n *\n * The present value is computed by solving the equation:\n *\n * ```\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) = 0\n * ```\n *\n * or, when `rate = 0`:\n *\n * ```\n * fv + pv + pmt * nper = 0\n * ```\n *\n * for `pv`, which is then returned.\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nfunction pv(rate, nper, pmt, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var isRateZero = rate === 0;\n  var temp = Math.pow(1 + rate, nper);\n  var fact = isRateZero ? nper : (1 + rate * whenMult) * (temp - 1) / rate;\n  return -(fv + pmt * fact) / temp;\n}\n/**\n * Compute the rate of interest per period\n *\n * @param nper - Number of compounding periods\n * @param pmt - Payment\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due ('begin' or 'end')\n * @param guess - Starting guess for solving the rate of interest\n * @param tol - Required tolerance for the solution\n * @param maxIter - Maximum iterations in finding the solution\n *\n * @returns the rate of interest per period (or `NaN` if it could\n *  not be computed within the number of iterations provided)\n *\n * @since v0.0.16\n *\n * ## Notes\n *\n * Use Newton's iteration until the change is less than 1e-6\n * for all values or a maximum of 100 iterations is reached.\n * Newton's rule is:\n *\n * ```\n * r_{n+1} = r_{n} - g(r_n)/g'(r_n)\n * ```\n *\n * where:\n *\n * - `g(r)` is the formula\n * - `g'(r)` is the derivative with respect to r.\n *\n *\n * The rate of interest is computed by iteratively solving the\n * (non-linear) equation:\n *\n * ```\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper - 1) = 0\n * ```\n *\n * for `rate.\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nfunction rate(nper, pmt, pv, fv, when, guess, tol, maxIter) {\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  if (guess === void 0) {\n    guess = 0.1;\n  }\n  if (tol === void 0) {\n    tol = 1e-6;\n  }\n  if (maxIter === void 0) {\n    maxIter = 100;\n  }\n  var rn = guess;\n  var iterator = 0;\n  var close = false;\n  while (iterator < maxIter && !close) {\n    var rnp1 = rn - _gDivGp(rn, nper, pmt, pv, fv, when);\n    var diff = Math.abs(rnp1 - rn);\n    close = diff < tol;\n    iterator++;\n    rn = rnp1;\n  }\n  // if exausted all the iterations and the result is not\n  // close enough, returns `NaN`\n  if (!close) {\n    return Number.NaN;\n  }\n  return rn;\n}\n/**\n * Return the Internal Rate of Return (IRR).\n *\n * This is the \"average\" periodically compounded rate of return\n * that gives a net present value of 0.0; for a more complete\n * explanation, see Notes below.\n *\n * @param values - Input cash flows per time period.\n *   By convention, net \"deposits\"\n *   are negative and net \"withdrawals\" are positive.  Thus, for\n *   example, at least the first element of `values`, which represents\n *   the initial investment, will typically be negative.\n * @param guess - Starting guess for solving the Internal Rate of Return\n * @param tol - Required tolerance for the solution\n * @param maxIter - Maximum iterations in finding the solution\n *\n * @returns Internal Rate of Return for periodic input values\n *\n * @since v0.0.17\n *\n * ## Notes\n *\n * The IRR is perhaps best understood through an example (illustrated\n * using `irr` in the Examples section below).\n *\n * Suppose one invests 100\n * units and then makes the following withdrawals at regular (fixed)\n * intervals: 39, 59, 55, 20.  Assuming the ending value is 0, one's 100\n * unit investment yields 173 units; however, due to the combination of\n * compounding and the periodic withdrawals, the \"average\" rate of return\n * is neither simply 0.73/4 nor (1.73)^0.25-1.\n * Rather, it is the solution (for `r`) of the equation:\n *\n * ```\n * -100 + 39/(1+r) + 59/((1+r)^2) + 55/((1+r)^3) + 20/((1+r)^4) = 0\n * ```\n *\n * In general, for `values` = `[0, 1, ... M]`,\n * `irr` is the solution of the equation:\n *\n * ```\n * \\\\sum_{t=0}^M{\\\\frac{v_t}{(1+irr)^{t}}} = 0\n * ```\n *\n * ## Example\n *\n * ```javascript\n * import { irr } from 'financial'\n *\n * irr([-100, 39, 59, 55, 20]) // 0.28095\n * irr([-100, 0, 0, 74]) // -0.0955\n * irr([-100, 100, 0, -7]) // -0.0833\n * irr([-100, 100, 0, 7]) // 0.06206\n * irr([-5, 10.5, 1, -8, 1]) // 0.0886\n * ```\n *\n * ## References\n *\n * - L. J. Gitman, \"Principles of Managerial Finance, Brief,\" 3rd ed.,\n *  Addison-Wesley, 2003, pg. 348.\n */\nfunction irr(values, guess, tol, maxIter) {\n  if (guess === void 0) {\n    guess = 0.1;\n  }\n  if (tol === void 0) {\n    tol = 1e-6;\n  }\n  if (maxIter === void 0) {\n    maxIter = 100;\n  }\n  // Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n  // ASF licensed (check the link for the full license)\n  // Credits: algorithm inspired by Apache OpenOffice\n  // Initialize dates and check that values contains at\n  // least one positive value and one negative value\n  var dates = [];\n  var positive = false;\n  var negative = false;\n  for (var i = 0; i < values.length; i++) {\n    dates[i] = i === 0 ? 0 : dates[i - 1] + 365;\n    if (values[i] > 0) {\n      positive = true;\n    }\n    if (values[i] < 0) {\n      negative = true;\n    }\n  }\n  // Return error if values does not contain at least one positive\n  // value and one negative value\n  if (!positive || !negative) {\n    return Number.NaN;\n  }\n  // Initialize guess and resultRate\n  var resultRate = guess;\n  // Implement Newton's method\n  var newRate = 0;\n  var epsRate = 0;\n  var resultValue = 0;\n  var iteration = 0;\n  var contLoop = true;\n  do {\n    resultValue = _irrResult(values, dates, resultRate);\n    newRate = resultRate - resultValue / _irrResultDeriv(values, dates, resultRate);\n    epsRate = Math.abs(newRate - resultRate);\n    resultRate = newRate;\n    contLoop = epsRate > tol && Math.abs(resultValue) > tol;\n  } while (contLoop && ++iteration < maxIter);\n  if (contLoop) {\n    return Number.NaN;\n  }\n  // Return internal rate of return\n  return resultRate;\n}\n/**\n * Returns the NPV (Net Present Value) of a cash flow series.\n *\n * @param rate - The discount rate\n * @param values - The values of the time series of cash flows.  The (fixed) time\n * interval between cash flow \"events\" must be the same as that for\n * which `rate` is given (i.e., if `rate` is per year, then precisely\n * a year is understood to elapse between each cash flow event).  By\n * convention, investments or \"deposits\" are negative, income or\n * \"withdrawals\" are positive; `values` must begin with the initial\n * investment, thus `values[0]` will typically be negative.\n * @returns The NPV of the input cash flow series `values` at the discount `rate`.\n *\n * @since v0.0.18\n *\n * ## Warnings\n *\n * `npv considers a series of cashflows starting in the present (t = 0).\n * NPV can also be defined with a series of future cashflows, paid at the\n * end, rather than the start, of each period. If future cashflows are used,\n * the first cashflow `values[0]` must be zeroed and added to the net\n * present value of the future cashflows. This is demonstrated in the\n * examples.\n *\n * ## Notes\n *\n * Returns the result of:\n *\n * ```\n * \\\\sum_{t=0}^{M-1}{\\\\frac{values_t}{(1+rate)^{t}}}\n * ```\n *\n * ## Examples\n *\n * Consider a potential project with an initial investment of $40 000 and\n * projected cashflows of $5 000, $8 000, $12 000 and $30 000 at the end of\n * each period discounted at a rate of 8% per period. To find the project's\n * net present value:\n *\n * ```javascript\n * import {npv} from 'financial'\n *\n * const rate = 0.08\n * const cashflows = [-40_000, 5000, 8000, 12000, 30000]\n * npv(rate, cashflows) // 3065.2226681795255\n * ```\n *\n * It may be preferable to split the projected cashflow into an initial\n * investment and expected future cashflows. In this case, the value of\n * the initial cashflow is zero and the initial investment is later added\n * to the future cashflows net present value:\n *\n * ```javascript\n * const initialCashflow = cashflows[0]\n * cashflows[0] = 0\n *\n * npv(rate, cashflows) + initialCashflow // 3065.2226681795255\n * ```\n *\n * ## References\n *\n * L. J. Gitman, \"Principles of Managerial Finance, Brief,\"\n * 3rd ed., Addison-Wesley, 2003, pg. 346.\n */\nfunction npv(rate, values) {\n  return values.reduce(function (acc, curr, i) {\n    return acc + curr / Math.pow(1 + rate, i);\n  }, 0);\n}\n/**\n * Calculates the Modified Internal Rate of Return.\n *\n * @param values - Cash flows (must contain at least one positive and one negative\n *   value) or nan is returned.  The first value is considered a sunk\n *   cost at time zero.\n * @param financeRate - Interest rate paid on the cash flows\n * @param reinvestRate - Interest rate received on the cash flows upon reinvestment\n *\n * @returns Modified internal rate of return\n *\n * @since v0.1.0\n */\nfunction mirr(values, financeRate, reinvestRate) {\n  var positive = false;\n  var negative = false;\n  for (var _iterator = _createForOfIteratorHelperLoose(values), _step; !(_step = _iterator()).done;) {\n    var value = _step.value;\n    if (value > 0) {\n      positive = true;\n    }\n    if (value < 0) {\n      negative = true;\n    }\n  }\n  // Return error if values does not contain at least one\n  // positive value and one negative value\n  if (!positive || !negative) {\n    return Number.NaN;\n  }\n  var numer = Math.abs(npv(reinvestRate, values.map(function (x) {\n    return x > 0 ? x : 0;\n  })));\n  var denom = Math.abs(npv(financeRate, values.map(function (x) {\n    return x < 0 ? x : 0;\n  })));\n  return Math.pow(numer / denom, 1 / (values.length - 1)) * (1 + reinvestRate) - 1;\n}\n/**\n * This function is here to simply have a different name for the 'fv'\n * function to not interfere with the 'fv' keyword argument within the 'ipmt'\n * function.  It is the 'remaining balance on loan' which might be useful as\n * it's own function, but is easily calculated with the 'fv' function.\n *\n * @private\n */\nfunction _rbl(rate, per, pmt, pv, when) {\n  return fv(rate, per - 1, pmt, pv, when);\n}\n/**\n * Evaluates `g(r_n)/g'(r_n)`, where:\n *\n * ```\n * g = fv + pv * (1+rate) ** nper + pmt * (1+rate * when)/rate * ((1+rate) ** nper - 1)\n * ```\n *\n * @private\n */\nfunction _gDivGp(r, n, p, x, y, when) {\n  var w = when === PaymentDueTime.Begin ? 1 : 0;\n  var t1 = Math.pow(r + 1, n);\n  var t2 = Math.pow(r + 1, n - 1);\n  var g = y + t1 * x + p * (t1 - 1) * (r * w + 1) / r;\n  var gp = n * t2 * x - p * (t1 - 1) * (r * w + 1) / Math.pow(r, 2) + n * p * t2 * (r * w + 1) / r + p * (t1 - 1) * w / r;\n  return g / gp;\n}\n/**\n * Calculates the resulting amount.\n *\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n * ASF licensed (check the link for the full license)\n *\n * @private\n */\nfunction _irrResult(values, dates, rate) {\n  var r = rate + 1;\n  var result = values[0];\n  for (var i = 1; i < values.length; i++) {\n    result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);\n  }\n  return result;\n}\n/**\n * Calculates the first derivation\n *\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n * ASF licensed (check the link for the full license)\n *\n * @private\n */\nfunction _irrResultDeriv(values, dates, rate) {\n  var r = rate + 1;\n  var result = 0;\n  for (var i = 1; i < values.length; i++) {\n    var frac = (dates[i] - dates[0]) / 365;\n    result -= frac * values[i] / Math.pow(r, frac + 1);\n  }\n  return result;\n}\n\n\n//# sourceMappingURL=financial.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/financial/dist/financial.esm.js\n");

/***/ })

};
;